'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = createAvd;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _mobxReact = require('../mobx-react');

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _plugin = require('./plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _camelCase = require('camel-case');

var _camelCase2 = _interopRequireDefault(_camelCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createAvd() {
  return function avd() {
    var hooks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


    var plugin = new _plugin2.default();
    plugin.use(hooks);

    var app = {
      // properties
      _router: null,
      _stores: [],
      _history: null,
      _plugin: plugin,
      _getProvider: null,
      // methods
      use: use,
      store: store,
      router: router,
      start: start
    };
    return app;

    function use(hooks) {
      plugin.use(hooks);
    }

    function store(store) {
      var storeName = (0, _camelCase2.default)(store.name);
      // this._stores[storeName] = new store();
      this._stores[storeName] = store;
    }

    function router(router) {
      (0, _invariant2.default)(typeof router === 'function', 'app.router: router should be function');
      this._router = router;
    }

    function start(container) {
      if (typeof container === 'string') {
        container = document.querySelector(container);
        (0, _invariant2.default)(container, 'app.start: could not query selector: ' + container);
      }

      (0, _invariant2.default)(!container || isHTMLElement(container), 'app.start: container should be HTMLElement');
      (0, _invariant2.default)(this._router, 'app.start: router should be defined');

      this._getProvider = getProvider.bind(null, app._store, app);

      if (container) {
        render(container, this._stores, this, this._router);
      } else {
        return getProvider(this._stores, this, this._router);
      }
    }

    // //////////////////////////////////
    // Helpers

    function getProvider(store, app, router) {
      return function (extraProps) {
        return _react2.default.createElement(
          _mobxReact.Provider,
          { store: store },
          router((0, _extends3.default)({ app: app, history: app._history }, extraProps))
        );
      };
    }

    function render(container, store, app, router) {
      var ReactDOM = require('react-dom');
      ReactDOM.render(_react2.default.createElement(getProvider(store, app, router)), container);
    }

    function isHTMLElement(node) {
      return (typeof node === 'undefined' ? 'undefined' : (0, _typeof3.default)(node)) === 'object' && node !== null && node.nodeType && node.nodeName;
    }
  };
}
module.exports = exports['default'];