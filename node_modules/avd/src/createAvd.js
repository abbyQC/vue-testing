import React from 'react';
import { Provider } from "../mobx-react";
import isPlainObject from 'is-plain-object';
import invariant from 'invariant';
import Plugin from './plugin';
import camelCase from 'camel-case'

export default function createAvd (){
  return function avd(hooks = {}) {

    const plugin = new Plugin();
    plugin.use(hooks);

    const app = {
      // properties
      _router: null,
      _stores: [],
      _history: null,
      _plugin: plugin,
      _getProvider: null,
      // methods
      use,
      store,
      router,
      start,
    };
    return app;

    function use(hooks) {
      plugin.use(hooks);
    }

    function store(store) {
      const storeName = camelCase(store.name)
      // this._stores[storeName] = new store();
      this._stores[storeName] = store;
    }

    function router(router) {
      invariant(typeof router === 'function', 'app.router: router should be function');
      this._router = router;
    }

    function start(container) {
      if (typeof container === 'string') {
        container = document.querySelector(container);
        invariant(container, `app.start: could not query selector: ${container}`);
      }

      invariant(!container || isHTMLElement(container), 'app.start: container should be HTMLElement');
      invariant(this._router, 'app.start: router should be defined');

      this._getProvider = getProvider.bind(null, app._store, app);

      if (container) {
        render(container, this._stores, this, this._router);
      } else {
        return getProvider(this._stores, this, this._router);
      }
    }

    // //////////////////////////////////
    // Helpers

    function getProvider(store, app, router) {
      return extraProps => (
        <Provider store={store}>
          { router({ app, history: app._history, ...extraProps }) }
        </Provider>
      );
    }

    function render(container, store, app, router) {
      const ReactDOM = require('react-dom');
      ReactDOM.render(React.createElement(getProvider(store, app, router)), container);
    }

    function isHTMLElement(node) {
      return typeof node === 'object' && node !== null && node.nodeType && node.nodeName;
    }

  }
}